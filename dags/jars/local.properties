# KMS configuration
kms.token.location=us-west1
kms.token.keyring=cloud-cdw-keyring
kms.token.key=tokens

# By default we will use a local, embedded Java database for
# convenience during development

#Prod -- MAKE SURE YOU CHANGE THE pubsub.dicom.bucket
database.user=
database.password=
database.url=jdbc:postgresql://cloud-sql-proxy:5433/deid

# Database pool size for vert.x
database.pool.size=25

# Services database pool
database.services.pool.size=25

# Standalone dicom import service pool size
database.services.importer.pool.size=10

# TODO: Move these into database
strideapi.token.refresh.url=https://api.rit.stanford.edu/token/api/v1/refresh

# The refresh token below is only used to seed the DB at first boot!
strideapi.token.refresh=xuhgqghqp3payipoyeiv4nozu54u8brlvipl4wu9bkv0ipukacm55i2pnb94xj72
strideapi.deid.url=https://api.rit.stanford.edu/identifiers/api/v2/uid
strideapi.mrn.url=https://api.rit.stanford.edu/identifiers/api/v2/mrn

# Declare any outbound network connections to be allowed by security manager
#connect.outbound=some-database:1521,my-email-server:1234

# Standalone importer threads
importer.threads.per.core=2
importer.threads.max=96

# Bucket listener threads
pubsub.bucket.threads=8

# Minimum age for a study (in minutes) before it is considered completely uploaded
# (we don't want to process a study that currently has instances being added to it)
study.minimum.age=30
job.retry.max=5

# Enable development features to make life easier, such as
# fake authentication
insecure.fake.security=yes
insecure.dev.mode=yes

# Customize the port and network interface on which to listen
# Use host 0.0.0.0 if you want to be able to connect remotely
listen.url=http://localhost:8000

# External (proxy/LB) location for this app
public.url=http://localhost:8000

# Web application context (in http://example.com/foo/bar/?baz
# it is the "foo" portion)
app.context=deid

# If serving https we need the private key
#ssl.keystore.path=local.ssl.jks
#ssl.keystore.password=secret

# DICOM bucket Pub/sub settings
pubsub.bucket.sub=deid-bucket-sub
#pubsub.bucket.name=rit-pacs-upload-dev
#pubsub.bucket.name=rit-pacs-upload
pubsub.bucket.pattern=^[0-9]{4}\\/[0-9]{2}\\/[0-9]{2}\\/[0-9_.]+\\/.*$

pubsub.worker.topic=deid-worker-topic
pubsub.server.subscription=deid-server-sub

# Pool size is the size of the entire HttpClient pool
http.pool.size=200
# Per route is how many to allocate to each destination server
http.pool.max.per.route=20

# OpenID Connect client info
auth.client.id=secure-app
auth.client.secret=...
auth.client.base.uri=http://localhost:8000/secure-app

# OpenID Connect server info
auth.server.base.uri=http://localhost:8080/auth/realms/demo/protocol/openid-connect
auth.server.public.key=...

# Disable database health check to make logs easier to read
healthcheck.interval.seconds=-1

# For debugging, if you want to see everything in the HTTP requests
#insecure.log.full.requests=yes

# Uncomment to disable compression (enabled by default)
#http.compression=no

security.env.var=GOOGLE_CLOUD_PROJECT,GCLOUD_PROJECT,GOOGLE_APPLICATION_CREDENTIALS,*

#Unfortunately google API hostnames just are not predicable, this had to be disabled.
#security.connect.outbound=localhost,metadata.google.internal,accounts.google.com,www.googleapis.com,cloudkms.googleapis.com,iam.googleapis.com,metadata,171.65.104.107,database
security.connect.outbound=*

security.files=/root/.config/-,/Users/eloh/-,/opt/airflow/dags/jars/starr-radio-server-1.2-SNAPSHOT.jar!/-,\
  /home/airflow/-
